{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminsymes/Desktop/GARDEM_Dashboard-master/dashboard-manager/src/components/dashboard.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WidgetContainer from \"./widgets/widgetContainer\";\nimport postData from '../data/List.json';\nimport { Toolbar } from \"@material-ui/core\";\nimport GridLayout from 'react-grid-layout';\n/**\n * The dashboard serves as the container for widgets. It should have\n * authority over the grid of widgets and their settings. It can be closed\n * and opened, ie some sort of save file/object saves the contents of the\n * dashboard, and that save can be loaded and unloaded at will, allowing\n * different dashboards.\n */\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  }\n}));\nconst layout = [];\n\nconst Dashboard = () => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"main\", {\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GridLayout, {\n    layout: layout,\n    cols: 3,\n    rowHeight: 250,\n    width: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, postData.map((postDetail, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(WidgetContainer, {\n      name: postDetail.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 32\n      }\n    }));\n  })));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/benjaminsymes/Desktop/GARDEM_Dashboard-master/dashboard-manager/src/components/dashboard.js"],"names":["React","makeStyles","WidgetContainer","postData","Toolbar","GridLayout","useStyles","theme","content","flexGrow","padding","spacing","layout","Dashboard","classes","map","postDetail","index","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA;;;;;;;;AAOA,MAAMC,SAAS,GAAGL,UAAU,CAACM,KAAK,KAAK;AACnCC,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAE,CADL;AAELC,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFJ;AAD0B,CAAL,CAAN,CAA5B;AAOA,MAAMC,MAAM,GAAG,EAAf;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,sBACI;AAAM,IAAA,SAAS,EAAEQ,OAAO,CAACN,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,UAAD;AACI,IAAA,MAAM,EAAEI,MADZ;AAEI,IAAA,IAAI,EAAE,CAFV;AAGI,IAAA,SAAS,EAAE,GAHf;AAII,IAAA,KAAK,EAAE,GAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKT,QAAQ,CAACY,GAAT,CAAa,CAACC,UAAD,EAAaC,KAAb,KAAqB;AAC7C,wBAAQ;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAiB,oBAAC,eAAD;AAAkB,MAAA,IAAI,EAAED,UAAU,CAACE,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjB,CAAR;AACA,GAFW,CANL,CAFJ,CADJ;AAeH,CAjBD;;AAmBA,eAAeL,SAAf","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport WidgetContainer from \"./widgets/widgetContainer\";\nimport postData from '../data/List.json'\nimport { Toolbar } from \"@material-ui/core\";\nimport GridLayout from 'react-grid-layout';\n/**\n * The dashboard serves as the container for widgets. It should have\n * authority over the grid of widgets and their settings. It can be closed\n * and opened, ie some sort of save file/object saves the contents of the\n * dashboard, and that save can be loaded and unloaded at will, allowing\n * different dashboards.\n */\nconst useStyles = makeStyles(theme => ({\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    }\n}));\n\nconst layout = [];\n\nconst Dashboard = () => {\n    const classes = useStyles();\n    return (\n        <main className={classes.content}>\n            <Toolbar />\n            <GridLayout\n                layout={layout}\n                cols={3}\n                rowHeight={250}\n                width={800}\n            >\n                {postData.map((postDetail, index)=>{\n\t\t\t  \treturn (<div key={index}><WidgetContainer  name={postDetail.title}/></div>)\n\t\t\t  })}\n            </GridLayout>\n        </main>\n    );\n};\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}